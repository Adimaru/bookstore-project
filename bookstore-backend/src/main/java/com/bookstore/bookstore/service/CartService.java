package com.bookstore.bookstore.service;

import com.bookstore.bookstore.model.Book;
import com.bookstore.bookstore.model.CartItem;
import com.bookstore.bookstore.model.User;
import com.bookstore.bookstore.repository.BookRepository;
import com.bookstore.bookstore.repository.CartItemRepository;
import lombok.RequiredArgsConstructor; // NEW: Import RequiredArgsConstructor
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger; // NEW: Import Logger
import org.slf4j.LoggerFactory; // NEW: Import LoggerFactory

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor // NEW: Replaces explicit constructor for final fields
public class CartService {

    private static final Logger logger = LoggerFactory.getLogger(CartService.class); // NEW: Logger

    private final CartItemRepository cartItemRepository;
    private final BookRepository bookRepository;

    // The constructor is now generated by @RequiredArgsConstructor
    // public CartService(CartItemRepository cartItemRepository, BookRepository bookRepository) {
    //     this.cartItemRepository = cartItemRepository;
    //     this.bookRepository = bookRepository;
    // }

    /**
     * Adds a book to the user's cart or updates its quantity if already present.
     * @param user The authenticated user.
     * @param bookId The ID of the book to add.
     * @param quantity The amount to add (should be positive).
     * @return The updated or newly created CartItem.
     * @throws RuntimeException if book is not found or quantity is invalid. (Changed from IllegalArgumentException)
     */
    @Transactional // Ensures the entire operation is atomic
    public CartItem addBookToCart(User user, Long bookId, int quantity) {
        logger.info("Attempting to add book {} (qty {}) to cart for user {}", bookId, quantity, user.getUsername());
        if (quantity <= 0) {
            throw new RuntimeException("Quantity must be positive."); // Changed to RuntimeException
        }

        Book book = bookRepository.findById(bookId)
                .orElseThrow(() -> new RuntimeException("Book not found with ID: " + bookId)); // Changed to RuntimeException

        Optional<CartItem> existingCartItem = cartItemRepository.findByUserAndBook(user, book);

        CartItem cartItem;
        if (existingCartItem.isPresent()) {
            cartItem = existingCartItem.get();
            cartItem.setQuantity(cartItem.getQuantity() + quantity);
            logger.debug("Updated quantity for existing cart item (id: {}) to {}", cartItem.getId(), cartItem.getQuantity());
        } else {
            cartItem = new CartItem();
            cartItem.setUser(user);
            cartItem.setBook(book);
            cartItem.setQuantity(quantity);
            logger.debug("Created new cart item for book {} with quantity {}", bookId, quantity);
        }

        return cartItemRepository.save(cartItem);
    }

    /**
     * Retrieves all cart items for a given user.
     * @param user The authenticated user.
     * @return A list of CartItem objects for the user.
     */
    @Transactional(readOnly = true) // NEW: Mark as read-only transaction
    public List<CartItem> getUserCart(User user) {
        logger.info("Retrieving cart items for user {}", user.getUsername());
        List<CartItem> cartItems = cartItemRepository.findByUser(user);
        logger.debug("Found {} cart items for user {}", cartItems.size(), user.getUsername());
        return cartItems;
    }

    /**
     * Updates the quantity of a specific cart item. If newQuantity is 0 or less, the item is removed.
     * @param user The authenticated user.
     * @param cartItemId The ID of the cart item to update.
     * @param newQuantity The new quantity for the item.
     * @return The updated CartItem, or null if the item was removed.
     * @throws RuntimeException if cart item not found, or user doesn't own it.
     */
    @Transactional
    public CartItem updateCartItemQuantity(User user, Long cartItemId, int newQuantity) {
        logger.info("Attempting to update cart item {} for user {} to quantity {}", cartItemId, user.getUsername(), newQuantity);

        CartItem cartItem = cartItemRepository.findById(cartItemId)
                .orElseThrow(() -> new RuntimeException("Cart item not found with ID: " + cartItemId)); // Changed to RuntimeException

        if (!cartItem.getUser().getId().equals(user.getId())) {
            throw new RuntimeException("Cart item does not belong to the authenticated user."); // Changed to RuntimeException
        }

        if (newQuantity <= 0) {
            // NEW: If quantity is 0 or less, remove the item from the cart
            cartItemRepository.delete(cartItem);
            logger.info("Cart item {} removed from cart for user {} as quantity was zero or less.", cartItemId, user.getUsername());
            return null; // Indicate that the item was removed
        }

        cartItem.setQuantity(newQuantity);
        logger.debug("Updated quantity for cart item {} to {}", cartItemId, newQuantity);
        return cartItemRepository.save(cartItem);
    }

    /**
     * Removes a specific cart item from the user's cart.
     * @param user The authenticated user.
     * @param cartItemId The ID of the cart item to remove.
     * @throws RuntimeException if cart item not found or user doesn't own it.
     */
    @Transactional
    public void removeCartItem(User user, Long cartItemId) {
        logger.info("Attempting to remove cart item {} from cart for user {}", cartItemId, user.getUsername());
        CartItem cartItem = cartItemRepository.findById(cartItemId)
                .orElseThrow(() -> new RuntimeException("Cart item not found with ID: " + cartItemId)); // Changed to RuntimeException

        if (!cartItem.getUser().getId().equals(user.getId())) {
            throw new RuntimeException("Cart item does not belong to the authenticated user."); // Changed to RuntimeException
        }

        cartItemRepository.delete(cartItem);
        logger.info("Cart item {} successfully removed for user {}", cartItemId, user.getUsername());
    }

    /**
     * Clears all items from a user's cart.
     * @param user The authenticated user.
     */
    @Transactional
    public void clearCart(User user) {
        logger.info("Attempting to clear cart for user {}", user.getUsername());
        cartItemRepository.deleteByUser(user);
        logger.info("Cart successfully cleared for user {}", user.getUsername());
    }
}